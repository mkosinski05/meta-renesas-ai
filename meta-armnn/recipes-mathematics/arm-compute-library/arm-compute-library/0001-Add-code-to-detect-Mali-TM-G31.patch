From 28722e0b5fa352f034976402ef31ca1c49a57608 Mon Sep 17 00:00:00 2001
From: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
Date: Tue, 29 Jun 2021 15:36:24 +0100
Subject: [PATCH] Add code to detect Mali(TM) G31

* Fixed a problem which made the library choose the Valhall path instead of Bifrost

* Set block sizes to 4 for u8 on G31

* Resolves MLCE-463

Change-Id: I577f57ec96f740db15d6640e34172318a82c5778
Signed-off-by: Pablo Marquez Tello <pablo.tello@arm.com>
Reviewed-on: https://review.mlplatform.org/c/ml/ComputeLibrary/+/5858
Reviewed-by: Georgios Pinitas <georgios.pinitas@arm.com>
Reviewed-by: Gian Marco Iodice <gianmarco.iodice@arm.com>
Tested-by: Arm Jenkins <bsgcomp@arm.com>
Comments-Addressed: Georgios Pinitas <georgios.pinitas@arm.com>
[PL: Port for v21.05]
Signed-off-by: Lad Prabhakar <prabhakar.mahadev-lad.rj@bp.renesas.com>
---
 arm_compute/core/GPUTarget.h                  |  1 +
 ...EMMDefaultConfigReshapedRHSOnlyBifrost.cpp | 31 +++++++++++++++++++
 ...LGEMMDefaultConfigReshapedRHSOnlyBifrost.h |  1 +
 src/core/GPUTarget.cpp                        |  4 +++
 utils/TypePrinter.h                           |  3 ++
 5 files changed, 40 insertions(+)

diff --git a/arm_compute/core/GPUTarget.h b/arm_compute/core/GPUTarget.h
index d9994b6cf0..39fc29dcd6 100644
--- a/arm_compute/core/GPUTarget.h
+++ b/arm_compute/core/GPUTarget.h
@@ -41,6 +41,7 @@ enum class GPUTarget
     T600          = 0x110,
     T700          = 0x120,
     T800          = 0x130,
+    G31           = 0x242,
     G71           = 0x210,
     G72           = 0x220,
     G51           = 0x230,
diff --git a/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.cpp b/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.cpp
index 3645a0e141..e6b15248d7 100644
--- a/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.cpp
+++ b/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.cpp
@@ -57,6 +57,10 @@ std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> CLGEMMDefaultConfigReshapedRHSOn
                                                                     &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G52_f16,
                                                                     &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G7x_u8);
 
+    CLGEMMConfigArray<ConfigurationFunctionExecutorPtr> configs_G31(&CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G7x_f32,
+                                                                    &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G7x_f16,
+                                                                    &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G31_u8);
+
     CLGEMMConfigArray<ConfigurationFunctionExecutorPtr> configs_G76(&CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G76_f32,
                                                                     &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G76_f16,
                                                                     &CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G76_u8);
@@ -78,6 +82,9 @@ std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> CLGEMMDefaultConfigReshapedRHSOn
         case GPUTarget::G52:
             func = configs_G52.get_function(data_type);
             break;
+        case GPUTarget::G31:
+            func = configs_G31.get_function(data_type);
+            break;
         default:
             func = configs_G7x.get_function(data_type);
             break;
@@ -109,6 +116,30 @@ std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> CLGEMMDefaultConfigReshapedRHSOn
     }
 }
 
+std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G31_u8(unsigned int m, unsigned int n, unsigned int k, unsigned int b)
+{
+    ARM_COMPUTE_UNUSED(k);
+    ARM_COMPUTE_UNUSED(b);
+
+    if(m == 1)
+    {
+        const unsigned int h0 = std::max(n / 2, 1U);
+        return configure_lhs_rhs_info(m, n, 1, 4, 16, 1, h0, 0, 1, 0, 1);
+    }
+    else
+    {
+        const int h0 = std::max(std::min(static_cast<int>(n / 4), static_cast<int>(256)), static_cast<int>(1));
+        if(m >= 28)
+        {
+            return configure_lhs_rhs_info(m, n, 4, 4, 4, 1, h0, 0, 1, 0, 1);
+        }
+        else
+        {
+            return configure_lhs_rhs_info(m, n, 4, 4, 4, 1, h0, 0, 1, 0, 1);
+        }
+    }
+}
+
 std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> CLGEMMDefaultConfigReshapedRHSOnlyBifrost::configure_G76_f32(unsigned int m, unsigned int n, unsigned int k, unsigned int b)
 {
     ARM_COMPUTE_UNUSED(k);
diff --git a/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.h b/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.h
index db89d8317c..35e9ea43fc 100644
--- a/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.h
+++ b/src/core/CL/gemm/reshaped_only_rhs/CLGEMMDefaultConfigReshapedRHSOnlyBifrost.h
@@ -55,6 +55,7 @@ private:
     std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> configure_G7x_u8(unsigned int m, unsigned int n, unsigned int k, unsigned int b);
     std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> configure_G76_u8(unsigned int m, unsigned int n, unsigned int k, unsigned int b);
     std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> configure_G51_u8(unsigned int m, unsigned int n, unsigned int k, unsigned int b);
+    std::pair<GEMMLHSMatrixInfo, GEMMRHSMatrixInfo> configure_G31_u8(unsigned int m, unsigned int n, unsigned int k, unsigned int b);
 };
 } // namespace cl_gemm
 } // namespace arm_compute
diff --git a/src/core/GPUTarget.cpp b/src/core/GPUTarget.cpp
index 14264cb883..b4bd2ddf40 100644
--- a/src/core/GPUTarget.cpp
+++ b/src/core/GPUTarget.cpp
@@ -83,6 +83,10 @@ arm_compute::GPUTarget get_bifrost_target(const std::string &version)
     {
         return arm_compute::GPUTarget::G76;
     }
+    else if(version.find("G31") != std::string::npos)
+    {
+        return arm_compute::GPUTarget::G31;
+    }
     else
     {
         return arm_compute::GPUTarget::UNKNOWN;
diff --git a/utils/TypePrinter.h b/utils/TypePrinter.h
index e849edc092..dc07ca5961 100644
--- a/utils/TypePrinter.h
+++ b/utils/TypePrinter.h
@@ -1842,6 +1842,9 @@ inline ::std::ostream &operator<<(::std::ostream &os, const GPUTarget &gpu_targe
         case GPUTarget::G78:
             os << "G78";
             break;
+        case GPUTarget::G31:
+            os << "G31";
+            break;
         case GPUTarget::TODX:
             os << "TODX";
             break;
-- 
2.17.1

